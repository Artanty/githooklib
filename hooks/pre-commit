#!/usr/bin/env node
const path = require('path');
const { execSync } = require('child_process');
const LogManager = require('../lib/log-manager');
const VersionManager = require('../lib/version-utils');

/**
 * bump version based on back & web package.jsons
 * and save it to TAG_VERSION variable in build/.env file
 */

// Configuration - can be overridden by environment variables
const config = {
  logDir: process.env.VBH_LOG_DIR || path.join(process.cwd(), 'build/logs'),
  envFile: process.env.VBH_ENV_FILE || path.join(process.cwd(), 'build/.env'),
  maxEntries: process.env.VBH_MAX_ENTRIES || 500,
  folders: {
    web: {
      path: process.env.VBH_WEB_PATH || path.join(process.cwd(), 'web/package.json'),
      folder: process.env.VBH_WEB_FOLDER || 'web/'
    },
    back: {
      path: process.env.VBH_BACK_PATH || path.join(process.cwd(), 'back/package.json'),
      folder: process.env.VBH_BACK_FOLDER || 'back/'
    }
  },
  clearTagDebugLogFile: true
};

// Initialize shared modules
const logManager = new LogManager(config);
const versionManager = new VersionManager(config, logManager);

// Main execution
try {
  logManager.debug('Starting pre-commit hook execution');

  // Process all configured folders
  for (const [folderName, folderConfig] of Object.entries(config.folders)) {
    logManager.debug(`Processing ${folderName} folder`);
    
    const stagedVersion = versionManager.getStagedVersion(folderConfig);
    const headVersion = versionManager.getHeadVersion(folderConfig);
    const folderChangesExist = versionManager.hasFolderChanges(folderConfig);

    logManager.debug(`
      ${folderName} State:
      - Staged Version: ${stagedVersion}
      - HEAD Version: ${headVersion}
      - Changes Exist: ${folderChangesExist}
    `);

    // Handle manual minor version bumps
    if (stagedVersion && headVersion) {
      const minorBumpVersion = versionManager.handleMinorVersionBump(folderConfig, stagedVersion, headVersion);
      if (minorBumpVersion) {
        logManager.history(`${folderName} version: Reset patch to 0 after minor version bump: ${minorBumpVersion}`);
        continue;
      }
    }

    // Check for other version changes
    if (stagedVersion && headVersion && stagedVersion !== headVersion) {
      logManager.history(`${folderName} version manually changed to ${stagedVersion}`);
      continue;
    } 
    
    // Auto-bump for folder changes
    if (folderChangesExist) {
      const newVersion = versionManager.bumpPatchVersion(folderConfig);
      if (newVersion) {
        logManager.history(`${folderName} version auto-bumped to ${newVersion} (${folderName} files changed)`);
      }
    } else {
      logManager.history(`No ${folderName} version change needed (no ${folderName} changes detected)`);
    }
  }

  // Update environment tag version
  versionManager.updateEnvTagVersion();
} catch (error) {
  logManager.error(`Fatal error in pre-commit hook: ${error.message}`);
  console.error('‚ùå Error in pre-commit hook:', error.message);
  process.exit(1);
} finally {
  logManager.debug('Pre-commit hook execution completed');
}